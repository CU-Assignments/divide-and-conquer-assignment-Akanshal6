
NAME: AKANSHA SINGH
UID: 22BCS14580
CLASS: 617/A
DATE: 05 FEBRUARY 2025







question 1:

A string s is nice if, for every letter of the alphabet that s contains, it appears both in uppercase and lowercase. For example, "abABB" is nice because 'A' and 'a' appear, and 'B' and 'b' appear. However, "abA" is not because 'b' appears, but 'B' does not.
Given a string s, return the longest substring of s that is nice. If there are multiple, return the substring of the earliest occurrence. If there are none, return an empty string.

CODE:

class Solution {
public:
    string longestNiceSubstring(string s) {
        if (s.size() < 2) return "";
        unordered_set<char> charSet(s.begin(), s.end());
        for (int i = 0; i < s.size(); ++i) {
            if (charSet.count(tolower(s[i])) && charSet.count(toupper(s[i]))) {
                continue;
            }
            string left = longestNiceSubstring(s.substr(0, i));
            string right = longestNiceSubstring(s.substr(i + 1));
            return left.size() >= right.size() ? left : right;
        }
        return s;
    }
};


QUESTION 2:

190. Reverse Bits
Reverse bits of a given 32 bits unsigned integer.

Note:

Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.

CODE:

class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
        uint32_t result = 0;
        for (int i = 0; i < 32; i++) {
            int bit = n & 1;       
            result = (result << 1) | bit; 
            n = n >> 1;           
        }
        return result;
    }
};

QUESTION 3

191. Number of 1 Bits
Given a positive integer n, write a function that returns the number of 
set bits
 in its binary representation (also known as the Hamming weight).

CODE:

class Solution {
public:
    int hammingWeight(int n) {
        int count = 0;
        while (n) {
            n &= (n - 1); 
            count++;
        }
        return count;
    }
};

QUESTION 4:

53. Maximum Subarray
Given an integer array nums, find the 
subarray
 with the largest sum, and return its sum.

CODE:

class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        int sum = 0;
        int maxi= 0;
        int n = nums.size();
        int i,j;
        if(n<k){
            return 0;
        }   
        for(i=0; i<k; i++){
            if(nums[i] == nums[i+1]){
                break;
                return 0;
            }
            sum += nums[i];
        }
        maxi = sum;    
        for (int i = k; i < n; i++) {
            if(nums[i] == nums[i+1]){
                break;
                return 0;
            }
            sum += nums[i] - nums[i-k]; 
            maxi = max(maxi, sum); 
        }
        return maxi;
    }
};


QUESTION 5:

240. Search a 2D Matrix II
Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.

CODE:

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size(), n = matrix[0].size();
        int row = 0, col = n - 1; 
        
        while (row < m && col >= 0) {
            if (matrix[row][col] == target) return true;
            else if (matrix[row][col] > target) col--;
            else row++;
        }
        return false;
    }
};

QUESTION 6:

372. Super Pow
Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.

CODE:

class Solution {
    const int base = 1337;
    int powmod(int a, int k) //a^k mod 1337 where 0 <= k <= 10
    {
        a %= base;
        int result = 1;
        for (int i = 0; i < k; ++i)
            result = (result * a) % base;
        return result;
    }
public:
    int superPow(int a, vector<int>& b) {
        if (b.empty()) return 1;
        int last_digit = b.back();
        b.pop_back();
        return powmod(superPow(a, b), 10) * powmod(a, last_digit) % base;
    }
};


QUESTION 7:

932. Beautiful Array
An array nums of length n is beautiful if:

nums is a permutation of the integers in the range [1, n].
For every 0 <= i < j < n, there is no index k with i < k < j where 2 * nums[k] == nums[i] + nums[j].
Given the integer n, return any beautiful array nums of length n. There will be at least one valid answer for the given n.


CODE:

class Solution {
public:
    vector<int> beautifulArray(int n) {
        if (n == 1) return {1};
        
        vector<int> odd = beautifulArray((n + 1) / 2);
        vector<int> even = beautifulArray(n / 2); 
        
        vector<int> result;
        for (int num : odd) result.push_back(num * 2 - 1);
        for (int num : even) result.push_back(num * 2);
        
        return result;
    }
};












